# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solutionFolder: '$(Build.SourcesDirectory)/NavfertyExcelAddIn'
  solution: '$(Build.SourcesDirectory)/NavfertyExcelAddIn.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Import Certificate"
      $pfxpath = '$(solutionFolder)/$(certfile)'
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $(password), [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
#     codeCoverageEnabled: true
#     # tests depending on Interop.Excel - run locally
#     testFiltercriteria: 'Name!=UnprotectWorkbookAndWorksheet_CanEditAndAddWorksheet
#                         &Name!=UnprotectWorkbookAndWorksheet_CanEditAndAddWorksheet' # more tests

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      "install tools:"
      &dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.12
      &dotnet tool install coverlet.console --tool-path . --version 1.4.1

      "`nmake reports dir:"
      mkdir .\reports

      "`nrun tests:"
      $unitTestFile = gci -Recurse | ?{ $_.FullName -like "*bin\*Tests.dll" }
      Write-Host "`$unitTestFile value: $unitTestFile"

      $coverlet = "$pwd\coverlet.exe"

      "calling $coverlet for $($unitTestFile.FullName)"
      &$coverlet $unitTestFile.FullName --target "dotnet" --targetargs "vstest $($unitTestFile.FullName) --logger:trx" --format "cobertura"

      "`ngenerate report(s)"
      gci -Recurse | 
          ?{ $_.Name -eq "coverage.cobertura.xml" } | 
          %{ &"$pwd\reportgenerator.exe" "-reports:$($_.FullName)" "-targetdir:reports" "-reporttypes:HTMLInline;HTMLChart" }


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)'



# https://stackoverflow.com/questions/30215324/vstest-code-coverage-report-in-jenkins
# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       $dllPath = $(get-ChildItem -Path D:/ -Recurse -Include *Microsoft.VisualStudio.Coverage.Analysis.dll)[0]
#       Add-Type -path $dllPath
#       $coverageFile = $(get-ChildItem -Path $(Agent.TempDirectory)/TestResults -Recurse -Include *coverage)[0]
#       $xmlCoverageFile = ".\TestResults\vstest.coveragexml"
#       [string[]] $executablePaths = @($coverageFile)
#       [string[]] $symbolPaths = @()
#       $info = [Microsoft.VisualStudio.Coverage.Analysis.CoverageInfo]::CreateFromFile($coverageFile, $executablePaths, $symbolPaths);
#       $data = $info.BuildDataSet()
#       $data.WriteXml($xmlCoverageFile)

# - task: DotNetCoreCLI@2
#   inputs:
#     command: custom
#     custom: tool
#     arguments: install --tool-path . dotnet-reportgenerator-globaltool
#   displayName: Install ReportGenerator tool

# - script: reportgenerator -reports:$(Agent.TempDirectory)/TestResults/**/*.coverage -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
#   displayName: 'Create reports'

# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage'
#   inputs:
#     codeCoverageTool: Cobertura
#     summaryFileLocation: '.\TestResults\vstest.coveragexml'
#      # $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

# - task: PublishCodeCoverageResults@1
#   inputs:
#     codeCoverageTool: 'JaCoCo'
#     summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml'

# - task: PublishCodeCoverageResults@1
#   inputs:
    #codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
    # summaryFileLocation: 'D:\a\_temp\TestResults\83c71d21-d7a1-4aab-bb35-85bbacdd8f41\VssAdministrator_fv-az630 2020-06-10 20_20_23.coverage'